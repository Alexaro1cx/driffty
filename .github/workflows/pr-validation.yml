name: pr-validation

on:
  pull_request:

jobs:
  lint:
    strategy:
      matrix:
        working-directory:
          - ./worker
          - ./engine
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2.5.2
        env:
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        with:
          version: v1.42.1
          args: -c .golangci.yml --new-from-rev ${{ github.event.pull_request.base.ref }}
          skip-go-installation: true
          working-directory: ${{ matrix.working-directory }}
  format-queries:
    name: format-queries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download OPA Binary
        run: |
          mkdir ./bin
          curl -L -o ./bin/opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod 755 ./bin/opa
          echo $PWD/bin >> $GITHUB_PATH
      - name: Format
        run: |
          make lint-queries
  unit-tests:
    name: unit-tests
    needs: [lint, format-queries]
    defaults:
      run:
        working-directory: ./engine
    strategy:
      matrix:
        go-version: [1.17.x]
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Get cache paths
        id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Test and Generate Report
        if: matrix.os != 'windows-latest'
        run: |
          make unit-test | tee unit-test.log
          result_code=${PIPESTATUS[0]}
          exit $result_code
      - name: Test and Generate Report Windows
        if: matrix.os == 'windows-latest'
        run: |
          make unit-test | tee unit-test.log
      - name: Archive test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: engine-unit-test-${{ runner.os }}-${{ github.event.pull_request.head.sha }}.log
          path: ./engine/unit-test.log
  E2E:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    strategy:
      matrix:
        working-directory:
          - ./worker
          - ./engine
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x
      - name: E2E test
        working-directory: ${{ matrix.working-directory }}
        run: make e2e
